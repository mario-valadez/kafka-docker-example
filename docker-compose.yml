version: "3.7"

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:5.2.1
    platform: linux/amd64
    restart: always
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: "2181"
      ZOOKEEPER_TICK_TIME: "2000"
      ZOOKEEPER_SERVERS: "zookeeper:22888:23888"
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-enterprise-kafka:5.2.1
    platform: linux/amd64
    depends_on:
      - zookeeper
    ports:
      # Exposes 29092 for external connections to the broker
      # Use kafka:9092 for connections internal on the docker network
      # See https://rmoff.net/2018/08/02/kafka-listeners-explained/ for details
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_BROKER_ID: 1
      KAFKA_BROKER_RACK: "r1"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_JMX_PORT: 9991

  init-kafka :
    image : confluentinc/cp-enterprise-kafka:5.2.1
    platform: linux/amd64
    restart : on-failure
    depends_on :
      - kafka
    entrypoint : [ '/bin/sh', '-c' ]
    command : |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:9092 --list
      "

  schemaregistry:
    image: confluentinc/cp-schema-registry:5.2.1
    platform: linux/amd64
    restart: always
    depends_on:
      - zookeeper
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper:2181"
      SCHEMA_REGISTRY_HOST_NAME: schemaregistry
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
      SCHEMA_REGISTRY_AVRO_COMPATIBILITY_LEVEL: "forward"
    ports:
      - 8081:8081

  postgres :
    image : postgres:14.3
    expose :
      - 5532
    ports :
      - "5532:5432"
    environment :
      POSTGRES_PASSWORD : postgres
      POSTGRES_DB : kafka-example